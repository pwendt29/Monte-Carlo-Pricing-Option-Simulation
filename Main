#include <iostream>
#include <cmath>
#include <random>
#include <vector>

//function to generate normally distributed random numbers
double generateGaussianNoise(double mean, double stddev) {
    static std:: mt19937 generator(std::random_device{}());
    std::normal_distribution<double> distribution(mean, stddev);
    return distribution(generator);
}

//function to calculate the payoff of a European call option
double callOptionPayoff(double S, double K) {
    return std::max(S - K, 0.0);
}

//function to calculate the payoff of a European put option
double putOptionPayoff(double S, double K) {
    return std::max(K - S, 0.0);
}

//Monte Carlo simulation for European option pricing
double monteCarloOptionPricing(double S0, double K, double r, double sigma, double T, int numSimulations, bool isCallOption) {
    double payoffSum = 0.0;
    
    for(int i = 0; i < numSimulations; ++i) {
        //Generate a random price path
        double ST = S0 * std::exp((r - 0.5 * sigma * sigma) * T + sigma * std::sqrt(T) * generateGaussianNoise(0.0, 1.0));
        
        //Calculate the payoff for this path
        double payOff = isCallOption ? callOptionPayoff(ST, K) : putOptionPayoff(ST, K);
        
        //Accumulate the pay pay off
        payOffSum += payOff;
    }
    
    //Calculate the average pay off and discount it to present value
    double averagePayoff = payOffSum / static_cast<double>(numSimulations);
    return std::exp(-r * T) * averagePayoff;
}

int main() {
    //Option parameters
    double S0 = 100.00;//Initial stock price
    double K = 100.00 ;//Strike price
    double r = 0.05; //Risk-free rate 
    double sigma = 0.2; //Volatility
    double T = 1;//Time to maturity (1 year)
    int numSimulations = 100000; //Number of simulations 
    
    //Calculate option prices
    double callPrice = monteCarloOptionPricing(S0, K, r, sigma, T, numSimulations, true);
    double putPrice = monteCarloOptionPricing(S0, K, r, sigma, T, numSimulations, false);
    
    //Output the results
    std::cout << "European Call Option Price: " << callPrice << std::endl;
    std::cout << "European Put Option Price: " << putPrice << std::endl;
    
    return 0;
    
}
